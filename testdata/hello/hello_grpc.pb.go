// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: hello.proto

package hello

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GrpcTestService_Hello_FullMethodName       = "/hello.GrpcTestService/Hello"
	GrpcTestService_HelloFields_FullMethodName = "/hello.GrpcTestService/HelloFields"
)

// GrpcTestServiceClient is the client API for GrpcTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcTestServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	HelloFields(ctx context.Context, in *HelloFieldsRequest, opts ...grpc.CallOption) (*HelloFieldsResponse, error)
}

type grpcTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcTestServiceClient(cc grpc.ClientConnInterface) GrpcTestServiceClient {
	return &grpcTestServiceClient{cc}
}

func (c *grpcTestServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, GrpcTestService_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcTestServiceClient) HelloFields(ctx context.Context, in *HelloFieldsRequest, opts ...grpc.CallOption) (*HelloFieldsResponse, error) {
	out := new(HelloFieldsResponse)
	err := c.cc.Invoke(ctx, GrpcTestService_HelloFields_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcTestServiceServer is the server API for GrpcTestService service.
// All implementations must embed UnimplementedGrpcTestServiceServer
// for forward compatibility
type GrpcTestServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	HelloFields(context.Context, *HelloFieldsRequest) (*HelloFieldsResponse, error)
	mustEmbedUnimplementedGrpcTestServiceServer()
}

// UnimplementedGrpcTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcTestServiceServer struct {
}

func (UnimplementedGrpcTestServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedGrpcTestServiceServer) HelloFields(context.Context, *HelloFieldsRequest) (*HelloFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloFields not implemented")
}
func (UnimplementedGrpcTestServiceServer) mustEmbedUnimplementedGrpcTestServiceServer() {}

// UnsafeGrpcTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcTestServiceServer will
// result in compilation errors.
type UnsafeGrpcTestServiceServer interface {
	mustEmbedUnimplementedGrpcTestServiceServer()
}

func RegisterGrpcTestServiceServer(s grpc.ServiceRegistrar, srv GrpcTestServiceServer) {
	s.RegisterService(&GrpcTestService_ServiceDesc, srv)
}

func _GrpcTestService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcTestServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcTestService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcTestServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcTestService_HelloFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcTestServiceServer).HelloFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcTestService_HelloFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcTestServiceServer).HelloFields(ctx, req.(*HelloFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcTestService_ServiceDesc is the grpc.ServiceDesc for GrpcTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello.GrpcTestService",
	HandlerType: (*GrpcTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _GrpcTestService_Hello_Handler,
		},
		{
			MethodName: "HelloFields",
			Handler:    _GrpcTestService_HelloFields_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}
